<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
   <!--
          说明： 过滤器：  https://logback.qos.ch/manual/filters.html
       1、日志级别及文件
       TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF
           日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中
           例如：error级别记录到log_error_xxx.log或log_error.log（该文件为当前记录的日志文件），而log_error_xxx.log为归档日志，
           日志文件按日期记录，同一天内，若日志文件大小等于或大于2M，则按0、1、2...顺序分别命名
           例如log-level-2013-12-21.0.log
           其它级别的日志也是如此。
       2、文件路径
           若开发、测试用，在Eclipse中运行项目，则到Eclipse的安装路径查找logs文件夹，以相对路径../logs。
           若部署到Tomcat下，则在Tomcat下的logs文件中
       3、Appender
           FILEERROR对应error级别，文件名以log-error-xxx.log形式命名
           FILEWARN对应warn级别，文件名以log-warn-xxx.log形式命名
           FILEINFO对应info级别，文件名以log-info-xxx.log形式命名
           FILEDEBUG对应debug级别，文件名以log-debug-xxx.log形式命名
           stdout将日志信息输出到控制台上，为方便开发测试使用
    -->
    
    <property name="APP_NAME" value="mcoms" />
    
    <!-- 每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录 -->
    <contextName>${APP_NAME}</contextName>
    <!--设置系统日志目录-->
    <property name="LOG_PATH" value="/suplus/logs" />
    
    <property name="APPDIR" value="mcoms" />

    <!-- 错误  日志记录器，日期滚动记录 -->
    <appender name="FILEERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_PATH}/${APPDIR}/log_error.log</file>
        
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">  
	      <!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
            	而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
	      <fileNamePattern>${LOG_PATH}/${APPDIR}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
	       <!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB -->  
	       <maxFileSize>100MB</maxFileSize>      
	       <maxHistory>60</maxHistory>  
	       <totalSizeCap>20GB</totalSizeCap>  
	    </rollingPolicy> 
        
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>===%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger Line:%-3L - %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!-- 此日志文件只记录error级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 告警  日志记录器，日期滚动记录 -->
    <appender name="FILEWARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_PATH}/${APPDIR}/log_warn.log</file>
        
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">  
	      <!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
            	而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
	      <fileNamePattern>${LOG_PATH}/${APPDIR}/warn/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
	       <!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB -->  
	       <maxFileSize>100MB</maxFileSize>      
	       <maxHistory>60</maxHistory>  
	       <totalSizeCap>20GB</totalSizeCap>  
	    </rollingPolicy>  
        
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>===%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger Line:%-3L - %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!-- 此日志文件只记录warn级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- INFO 日志记录器，日期滚动记录 -->
    <appender name="FILEINFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_PATH}/${APPDIR}/log_info.log</file>
        
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">  
	      <!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
            	而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
	      <fileNamePattern>${LOG_PATH}/${APPDIR}/info/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>  
	       <!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB -->  
	       <maxFileSize>100MB</maxFileSize>      
	       <maxHistory>60</maxHistory>  
	       <totalSizeCap>20GB</totalSizeCap>  
	    </rollingPolicy>  
        
        <!-- 追加方式记录日志 -->
        <append>true</append>
        
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>===%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger Line:%-3L - %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        
        <!-- 此日志文件记录大于info级别的 -->
         <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
	     	<level>INFO</level>
	     </filter>
    </appender>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--encoder 默认配置为PatternLayoutEncoder-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level  %-10X{username}  %X{req.remoteHost} %X{req.requestURI} --- [%thread] %logger{35} Line:%-3L : %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>
    
     <!-- <turboFilter class="ch.qos.logback.classic.turbo.MDCFilter">
	    <MDCKey>username</MDCKey>
	    <Value>system</Value>
	    <OnMismatch>DENY</OnMismatch>
	  </turboFilter> -->
    
    <!-- 异步appender -->
    <appender name="ASYNC_FILEERROR" class="ch.qos.logback.classic.AsyncAppender">
	    <appender-ref ref="FILEERROR" />
	</appender>
    
    <appender name="ASYNC_FILEWARN" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILEWARN" />
	</appender>
    
    <appender name="ASYNC_FILEINFO" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILEINFO" />
	</appender>
    
    <appender name="ASYNC_STDOUT" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="STDOUT" />
	</appender>

	<!--
		设置<logger>
		(1). 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>有一个name属性,一个可选的level和一个可选的addtivity属性。
		(2). name: 用来指定受此logger约束的某一个包或者具体的某一个类。
		(3). level: 用来设置打印级别, 大小写无关:TRACE,DEBUG,INFO,WARN,ERROR,ALL和OFF,还有一个特俗值INHERITED或者同义词NULL,代表强制执行上级的级别。如果未设置此属性,那么当前logger将会继承上级的级别。
		(4). addtivity: 是否向上级logger传递打印信息。默认是true。
		(5). <logger>可以包含零个或多个<appender-ref>元素,标识这个appender将会添加到这个logger。
		(6). <root>元素也是<loger>元素,它是根logegr。只有一个level属性。
 	-->
    <logger name="org.springframework" level="INFO" />
    <logger name="org.hibernate" level="WARN" />
    <!-- 打印 SQL语句 -->
    
    <!-- 
		logback中additivity属性源码分析
		http://skyao.github.io/2014/09/23/logback-additivity/
	 -->
    <logger name="org.hibernate.SQL" level="DEBUG" />
    <logger name="com.zaxxer.hikari" level="DEBUG" />

    <!-- 生产环境下，将此级别配置为适合的级别，以免日志文件太多或影响程序性能 -->
    <root level="DEBUG">
        <appender-ref ref="ASYNC_FILEERROR" />
        <appender-ref ref="ASYNC_FILEWARN" />
        <appender-ref ref="ASYNC_FILEINFO" />
         <!-- 生产环境将请stdout  -->
        <appender-ref ref="ASYNC_STDOUT" />
    </root>
</configuration>